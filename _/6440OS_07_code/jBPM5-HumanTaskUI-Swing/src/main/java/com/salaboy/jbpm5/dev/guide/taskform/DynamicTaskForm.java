/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.salaboy.jbpm5.dev.guide.taskform;

import com.salaboy.jbpm5.dev.guide.tablemodel.TaskParametersTableModel;
import java.util.LinkedHashMap;
import java.util.Map;
import org.jbpm.task.Content;
import org.jbpm.task.Task;
import org.jbpm.task.service.ContentData;
import org.jbpm.task.service.local.LocalTaskService;
import org.jbpm.task.utils.ContentMarshallerHelper;

/**
 *
 * @author salaboy
 */
public class DynamicTaskForm extends javax.swing.JPanel {
    protected long taskId;
    protected LocalTaskService localTaskService;
    protected String userId;
    protected Task task;
    
    private TaskParametersTableModel taskParametersTableModel;

    /**
     * Creates new form OtherTaskForm
     */
    public DynamicTaskForm(LocalTaskService localTaskService, long taskId, String userId) {
        this.taskId = taskId;
        this.localTaskService = localTaskService;
        this.userId = userId;
        initComponents();
        this.setName("Dymanic Task Form - " + taskId);
        this.taskIdjTextField.setText(Long.toString(taskId));

        this.taskParametersTableModel = new TaskParametersTableModel();
        this.tblParameters.setColumnModel(new TaskParametersTableModel.ColumnModel());
        this.tblParameters.setModel(taskParametersTableModel);
        
        updateTask();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        taskIdjTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        taskStatusjTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        taskNamejTextField = new javax.swing.JTextField();
        completejButton = new javax.swing.JButton();
        startjButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblParameters = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        failjButton = new javax.swing.JButton();

        jLabel1.setText("Task Id:");

        jLabel2.setText("Status:");

        jLabel3.setText("Name:");

        completejButton.setText("Complete");
        completejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completejButtonActionPerformed(evt);
            }
        });

        startjButton.setText("Start");
        startjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startjButtonActionPerformed(evt);
            }
        });

        tblParameters.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblParameters);

        jLabel4.setText("Parameters:");

        failjButton.setText("Fail");
        failjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                failjButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(36, 36, 36)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1)
                    .add(jLabel4)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(layout.createSequentialGroup()
                                .add(jLabel1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(taskIdjTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 128, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel3)
                                    .add(jLabel2))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(taskStatusjTextField)
                                    .add(taskNamejTextField))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(startjButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(completejButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(failjButton)))
                .add(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(31, 31, 31)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(taskIdjTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(completejButton)
                    .add(startjButton)
                    .add(failjButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(taskNamejTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(taskStatusjTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(10, 10, 10)
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 175, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(230, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void completejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completejButtonActionPerformed
        System.out.println(" Completing Task: " + task.getId() + " - userId: " + userId);
        
        //Create content data.
        ContentData data = createContentData();
        
        localTaskService.complete(task.getId(), userId, data);
    }//GEN-LAST:event_completejButtonActionPerformed

    private void startjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startjButtonActionPerformed
        System.out.println(" Starting Task: " + task.getId() + " - userId: " + userId);
        localTaskService.start(task.getId(), userId);
        updateTask();
    }//GEN-LAST:event_startjButtonActionPerformed

    private void failjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_failjButtonActionPerformed
        System.out.println(" Aborting Task: " + task.getId() + " - userId: " + userId);
        
        localTaskService.fail(task.getId(), userId, null);
    }//GEN-LAST:event_failjButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton completejButton;
    private javax.swing.JButton failjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton startjButton;
    private javax.swing.JTextField taskIdjTextField;
    private javax.swing.JTextField taskNamejTextField;
    private javax.swing.JTextField taskStatusjTextField;
    private javax.swing.JTable tblParameters;
    // End of variables declaration//GEN-END:variables

    protected void updateTask() {
        this.task = localTaskService.getTask(taskId);
        this.taskStatusjTextField.setText(task.getTaskData().getStatus().name());
        this.taskNamejTextField.setText(task.getNames().get(0).getText());
        
        Content content = this.localTaskService.getContent(task.getTaskData().getDocumentContentId());
        Map<String, Object> contentData = (Map<String, Object>) ContentMarshallerHelper.unmarshall(content.getContent(), null);

        this.taskParametersTableModel.clear();
        for (Map.Entry<String, Object> entry : contentData.entrySet()) {
            this.taskParametersTableModel.addRow(entry.getKey(), (String)entry.getValue());
        }
        
        switch (task.getTaskData().getStatus()){
            case InProgress:
                setParameterTableReadOnlyStatus(false); 
                break;
            default:
                setParameterTableReadOnlyStatus(true);
                break;
        }
        
        this.updateTaskActionButonStatus();
    }
    
    private void setParameterTableReadOnlyStatus(boolean readonly){
        this.tblParameters.setEnabled(!readonly);
    }
    
    private void updateTaskActionButonStatus(){
        switch (task.getTaskData().getStatus()){
            case Ready:
            case Reserved:
                this.startjButton.setEnabled(true);
                this.completejButton.setEnabled(false);
                this.failjButton.setEnabled(false);
                break;
            case InProgress:
                this.startjButton.setEnabled(false);
                this.completejButton.setEnabled(true);
                this.failjButton.setEnabled(true);
                break;
            default:
                this.startjButton.setEnabled(false);
                this.completejButton.setEnabled(false);
                this.failjButton.setEnabled(false);
                break;
                
        }
    }
    
    /**
     * Creates a Map from the parameters table and marshalls it.
     * @return 
     */
    private ContentData createContentData(){
        
        Map<String, String> parameters = new LinkedHashMap<String, String>();

        int paramColumnIndex = TaskParametersTableModel.ColumnHeaders.PARAMETER.ordinal();
        int valueColumnIndex = TaskParametersTableModel.ColumnHeaders.VALUE.ordinal();
        
        for (int row = 0; row < this.taskParametersTableModel.getRowCount(); row++) {
            String paramName = (String) this.taskParametersTableModel.getValueAt(row, paramColumnIndex);
            String value = (String) this.taskParametersTableModel.getValueAt(row, valueColumnIndex);
            parameters.put(paramName, value);
        }
        
        return ContentMarshallerHelper.marshal(parameters, null);
    }
}
