Chapter 7 - Human Tasks Interactions

The Projects included in chapter 7 covers:

- jBPM5-HumanTasksSimple: Simple example using the Human Task Services
- jBPM5-HumanTaskUI-Swing: Simple example showing how to create a simple User Interface using Swing
- jBPM5-HumanTaskAndProcesses: Simple example that shows the interaction of Business Process and the Human Task Service covering the usage of the GenericHTWorkItemHandler. This example also covers the integration with an existing LDAP identity repository using the UserGroupCallbacks.


Configuration and usage of the jbpm-human-task services

In order to use the jbpm-human-task service as a direct dependency to our application we need to include the following dependencies our project descriptor (pom.xml file).<dependency>  <groupId>org.jbpm</groupId>  <artifactId>jbpm-human-task-core</artifactId>  <version>${jbpm.version}</version></dependency>If you want to use the provided transports instead of using the embedded option you will need to add the transport dependency:<dependency>   <groupId>org.jbpm</groupId>   <artifactId>jbpm-human-task-mina</artifactId>   <version>${jbpm.version}</version></dependency>or for JMS/HornetQ:<dependency>  <groupId>org.jbpm</groupId>  <artifactId>jbpm-human-task-hornetq</artifactId>  <version>${jbpm.version}</version></dependency>

Once we have this dependency inside our application, we will be able to use all the classes provided inside the Human Task component. The next step is to configure the persistence mechanism. Because this module is using JPA, we need to provide a persistence.xml file that defines our Persistence Unit. 

Once we have this dependency inside our application, we will be able to use all the classes provided inside the Human Task component. The next step is to configure the persistence mechanism. Because this module is using JPA, we need to provide a persistence.xml file that defines our Persistence Unit. The persistence.xml file provided in this example can be found at /src/test/resources/META-INF/ â€“ from there, it will be automatically picked up and we can start using it. Take a look at the content of this file:https://github.com/Salaboy/jBPM5-Developer-Guide/blob/master/chapter_07/jBPM5-HumanTasksSimple/src/test/resources/META-INF/persistence.xmlThe Human Task component requires just one persistence unit, for this example called:  "org.jbpm.task". This persistence unit sets the persistence provider to Hibernate. We will need to set up the following dependencies to our project:<dependency>  <groupId>org.hibernate</groupId>  <artifactId>hibernate-entitymanager</artifactId>  <version>${hibernate.version}</version>  <scope>test</scope></dependency><dependency>  <groupId>org.hibernate</groupId>  <artifactId>hibernate-core</artifactId>  <version>${hibernate.core.version}</version>  <scope>test</scope></dependency>Notice that both dependencies were included with scope test. This is because we are testing the behavior in this project. For real scenarios, you will need to remove the scope tag or change it to runtime. As you may notice the persistence.xml file also defines the classes that will be used by the Human Task component, which will be persistent entities. Finally, the persistence.xml file defines in the properties section all the parameters required to contact the database where the Human Task Component stores all the information about our Tasks.

For the sake of simplicity we are using H2 a lightweight and embeddable database, which allows us to create an in memory database without worrying too much about configurations. For real scenarios, you will need to include the information to contact your real database here. As you can see, all the properties depend on the database that you are using. For more information about how to configure JPA for your specific database, you can take a look at the following link:http://docs.jboss.org/hibernate/entitymanager/3.5/reference/en/html/configuration.htmlFinally, we need to include H2 to our project as a dependency as well:<dependency>  <groupId>com.h2database</groupId>  <artifactId>h2</artifactId>  <version>1.3.161</version>  <scope>test</scope></dependency>Once we have all the dependencies in place, we can start looking at the test code to see how we can use the Human Task Component. 


For updates about the book visit: http://salaboy.com 
or follow me on twitter: http://www.twitter.com/salaboy
- Salaboy 2012

